{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","SayWelcome","this","props","name","React","Component","MailBox","unreadMessages","length","WarningBanner","warn","className","BoilingVerdict","celcius","Calculator","state","temperature","scale","handleCelciusChange","bind","handleFahrenheitChange","setState","e","target","value","tryConvert","toCelcius","fahrenheit","toFahrenheit","Dialogue","title","message","onTemperatureChange","parseFloat","scaleNames","c","f","TemperatureInput","handleChange","onChange","convert","input","Number","isNaN","output","Math","round","toString","FancyBorder","color","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc6890fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nclass SayWelcome extends React.Component{\n  render(){\n    return( <h1>Hellow , {this.props.name}</h1>);\n  }\n}\n\nclass PrintHello extends React.Component{\n  render(){\n    return(\n      <SayWelcome name=\"PP\" />\n    );\n  }\n}\n\nclass Clock extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={date : new Date()};\n  }\n\n  componentDidMount(){\n    this.timerId = setInterval(\n      () => this.tick(),1000\n    );\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.timerId);\n  }\n\n  tick(){\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>hello, world !!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\n//Prevent Link default behavior\nfunction ActionLink(){\n  function handleClick(e){\n    e.preventDefault();\n    console.log('The link was clicked');\n  }\n\n  return(\n    <a href=\"#\" onClick={handleClick}> \n      Click me\n    </a>\n  );\n}\n\nclass ToggleButton extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {isToggleOn : true};\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(){\n    this.setState(\n     state =>({ isToggleOn : !state.isToggleOn})\n    );\n  }\n\n  render(){\n    return(\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nclass Greeting extends React.Component{\n  constructor(props){\n    super(props);\n    this.props.isLoggedIn = props.isLoggedIn;\n  }\n}\n\nclass LoginControl extends React.Component{\n  constructor(props){\n    super(props);\n    \n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state={isLoggedIn : true};\n  }\n\n  handleLoginClick(){\n    this.setState(\n      {isLoggedIn : false}\n    );\n  }\n\n  handleLogoutClick(){\n    this.setState({isLoggedIn : true});\n  }\n\n  render(){\n    const isLoggedIn = this.state.isLoggedIn;\n    let button;\n    if(isLoggedIn){\n      button = <button onClick={this.handleLoginClick}>Logout</button>\n    }else{\n      button = <button onClick={this.handleLogoutClick}>Login</button>\n    }\n\n    return(\n     <div>\n       {button}\n     </div>\n    );\n  }\n\n}\n\nfunction MailBox(props){\n  const unreadMessages=props.unreadMessages;\n  return(\n   <div>\n     <h1>Hello</h1>\n     {unreadMessages.length > 0 &&\n       <h2>\n         You have {unreadMessages.length} unread messages.\n       </h2>\n    }\n   </div>\n  );\n}\n\nclass DisplayMailBox extends React.Component{\n  render(){\n    const messages=['aaa','bbbb','cccc'];\n    return(\n      <MailBox unreadMessages={messages} ></MailBox>\n\n    );\n  }\n}\n\nfunction WarningBanner(props){\n  if(!props.warn){\n    return null;\n  }\n\n  return(\n    <div className=\"warning\">\n      Warning !\n    </div>\n  );\n}\n\nclass Page extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {showWarning : true};\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick(){\n    this.setState(state => ({ \n      showWarning : !this.state.showWarning\n    }));\n  }\n\n  render(){\n    return(\n      <div>\n        <WarningBanner warn={this.state.showWarning} ></WarningBanner>\n        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? \"Hide\" : \"show\"}\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction ListItems(){\n  const numbers=[1,2,3,4];\n  const listOfItems = numbers.map(\n    (number) => <li key={number.toString()}>{number * 2}</li>\n  );\n\n  return(\n    <ul>{listOfItems}</ul>\n  );\n}\n\n//Forms\nclass NameForm extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {value : ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event){\n    this.setState({value : event.target.value})\n  }\n\n  handleSubmit(event){\n    alert('A name was submitted :' + this.state.value);\n    event.preventDefault();\n  }\n\n  render(){\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}></input>\n        </label>\n        <input type=\"submit\" value=\"Submit\"></input>\n      </form>\n    );\n  }\n}\n\nclass EssayForm extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      value : 'Please write some content here...',\n      essw : 'here it comes:'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event){\n    this.setState({value : event.target.value});\n  }\n\n  handleSubmit(event){\n    this.setState({essw  : this.state.value})\n    event.preventDefault();\n  }\n\n  render(){\n    return(\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Essay:\n          <textarea value={this.state.value} onChange={this.handleChange}></textarea>\n        </label>\n        <input type=\"submit\" value=\"Submit\"></input>        \n      </form>\n      \n      <h3>\n        {this.state.essw}\n      </h3>\n      </div>\n    );\n  }\n}\n\n//dropdown\nclass FlavorForm extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {value : 'coconut'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChange(event){\n    this.setState({value : event.target.value});\n  }\n\n  handleSubmit(event){\n    //this.setState()\n    event.preventDefault();\n  }\n\n  render(){\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Pick your favourite flavor :\n          <select value={this.state.value} onChange={this.handleChange}>\n            <option value=\"grapefruit\">Grape Fruit</option>\n            <option value=\"lime\">Lime</option>\n            <option value=\"mango\">Mango</option>\n            <option value=\"coconut\">Coconut</option>\n            <option value=\"grapes\">Grapes</option>\n          </select>\n        </label>\n        <input type=\"submit\" value=\"Submit\"></input>\n      </form>\n    );\n  }\n}\n\n//Handling multiple selections:\nclass Reservation extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      isGoing : true,\n      numberOfGuests : 2\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event){\n    const target = event.target;\n    const value = target.type === 'checkbox' ?target.checked :target.value;\n    const name = target.name;\n\n    this.setState({\n      [name] : value\n    });\n  }\n\n  render(){\n    return(\n      <form>\n        <label>\n          Is going : \n          <input name=\"isGoing\" type=\"checkbox\" \n              onChange={this.handleInputChange} checked={this.state.isGoing} ></input>\n          \n        </label>\n        <br/>\n        <label>\n          Number Of Guests:\n          <input name=\"numberOfGuests\" type=\"number\" \n             value={this.state.numberOfGuests} onChange={this.handleInputChange}></input>\n        </label>\n      </form>\n    );\n  }\n}\n\n//Lifting State Up\nfunction BoilingVerdict(props){\n if(props.celcius >= 100){\n   return <p>The water would boil.</p>\n }else{\n   return <p>The water would not boil.</p>\n }\n}\n\nclass Calculator extends React.Component{\n  constructor(props){\n    super(props);\n    //this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature : '', scale : 'c'};\n\n    this.handleCelciusChange = this.handleCelciusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n  }\n\n  handleCelciusChange(temperature){\n   this.setState({scale : 'c',temperature});\n  }\n\n  handleFahrenheitChange(temperature){\n    this.setState({scale : 'f',temperature});\n  }\n\n  handleChange(e){\n    this.setState({temperature : e.target.value});\n  }\n\n  render(){\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celcius = scale === 'f' ? tryConvert(temperature,toCelcius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature,toFahrenheit) : temperature;\n\n    return(\n      /*\n      <fieldset>\n        <legend>Enter Temperature in Celcius : </legend>\n        <input value={this.state.temperature} onChange={this.handleChange}></input>\n        <BoilingVerdict celcius={parseFloat(this.state.temperature)} />\n      </fieldset> */\n      <div className=\"midBox\">\n        <Dialogue title=\"Temparature Converter\" \n           message=\"Utility to convert the temperature between Celcius and Fahrenheit.\">\n          <TemperatureInput scale='c' temperature={celcius} \n            onTemperatureChange={this.handleCelciusChange}></TemperatureInput>\n\n          <TemperatureInput scale='f' temperature={fahrenheit} \n            onTemperatureChange = {this.handleFahrenheitChange}></TemperatureInput>\n\n           <BoilingVerdict celcius={parseFloat(celcius)}></BoilingVerdict>\n        </Dialogue>\n      </div>\n    );\n  }\n}\n\nconst scaleNames ={\n  c: 'Celcius',\n  f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state ={temperature : ''};\n  }\n\n  handleChange(e){\n    //this.setState({temperature : e.target.value});\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render(){\n    //const temperature = this.state.temperature;\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n\n    return(\n      <fieldset>\n        <legend className=\"textClass\">Enter Temperature in {scaleNames[scale]}</legend>\n        <input value={temperature} onChange={this.handleChange}></input>\n      </fieldset>\n\n    );\n  }\n}\n\nfunction toCelcius(fahrenheit){\n return (fahrenheit-32) * 5 / 9;\n}\n\nfunction toFahrenheit(celcius){\n  return (celcius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature , convert){\n const input = parseFloat(temperature);\n if(Number.isNaN(input)){\n   return '';\n }\n const output = convert(input);\n const rounded = Math.round(output * 1000) / 1000;\n return rounded.toString();\n\n}\n\n//Composition\nfunction FancyBorder(props){\n return(\n   <div className={'FancyBorder FancyBorder-' + props.color}>\n     {props.children}\n   </div>\n );\n}\n\nfunction Dialogue(props){\n  return(\n    <FancyBorder color=\"orange\">\n      <h1 className=\"Dialogue-title\">\n        {props.title}\n      </h1>\n      <p className=\"Dialogue-message\">\n        {props.message}\n      </p>\n\n      {props.children}\n    </FancyBorder>\n  );\n}\n\nfunction WelcomeDialogue(){\n  return(\n    <Dialogue title=\"Welcome\" message=\"Thanks for visting space craft.\">\n    </Dialogue>\n\n    /*\n    <FancyBorder color='blue'>\n     <h1 className=\"Dialogue-title\">\n      Welcome\n     </h1>\n     <p className=\"Dialogue-message\">\n       Thanks for visting space craft.\n     </p>\n    </FancyBorder>*/\n  );\n}\n\nclass SignUpDialogue extends React.Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state={login : ''};\n  }\n\n  handleChange(e){\n    this.setState({ login : e.target.value});\n  }\n\n  handleSignUp(){\n    alert('Welcome..');\n  }\n\n  render(){\n    return(\n      <Dialogue title=\"Login Window\" message=\"AAAA\">\n        <input value={this.state.login} onChange={this.handleChange}></input>\n        <button onClick={this.handleSignUp}>\n         Sign Me Up!\n        </button>\n      </Dialogue>\n    );\n  }\n}\n\n//export default App;\n//export default Welcome;\n//export default PrintHello;\n//export default Clock;\n//export default ActionLink;\n//export default ToggleButton;\n//export default LoginControl;\n//export default DisplayMailBox;\n//export default Page;\n//export default ListItems;\n//export default NameForm;\n//export default EssayForm;\n//export default FlavorForm;\n//export default Reservation;\nexport default Calculator;\n//export default WelcomeDialogue;\n//export default SignUpDialogue;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}